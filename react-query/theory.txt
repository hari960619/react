CMDS: 
    npm i react-router-dom @tanstack/react-query @tanstack/react-query-devtools axios
    npm i -D @tanstack/eslint-plugin-query

Wrap the entire component using QueryClient and QueryClientProvider. 
    Create a new instance using the QueryClient and using QueryClientProvider pass the new client as client.

import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { ReactQueryDevtools } from "@tanstack/react-query-devtools";

 <BrowserRouter>
    <QueryClientProvider client={queryClient}>
      <App />
      <ReactQueryDevtools initialIsOpen={false} />
    </QueryClientProvider>
  </BrowserRouter>

  const {
    data: product,
    isLoading,
    isError,
    status
  } = useQuery({
    queryKey: ["product", productID],
    queryFn: async () => {
      let res = await axios.get(
        `http://localhost:8000/api/products/${productID}`
      );
      console.log(res.data.product);
      return res.data.product;
    },
    staleTime: Infinity,
    // SET true byDefault: refetchOnMount: true,
    // SET true byDefault: refetchOnWindowFocus: true,
    // SET true byDefault: refetchOnReconnect: true,
    // SET true byDefault: refetchInterval,
  });

  status can be pending and success.

staleTime takes the priority.
If the staleTime is not completed then it won't refetch for any settings.

By default, "inactive" queries are garbage collected after 5 minutes.
    To change this, you can alter the default gcTime for queries to something other than 1000 * 60 * 5 milliseconds.

Stale queries are refetched automatically in the background when:
    1) New instances of the query mount ==> refetchOnMount : boolean
    2) The window is refocused ==> refetchOnWindowFocus : boolean 
    3) The network is reconnected ==> refetchOnReconnect  : milliseconds
    4) The query is optionally configured with a refetch interval ==> refetchInterval : milliseconds

By default, "inactive" queries are garbage collected after 5 minutes. 
To change this, you can alter the default gcTime for queries to something other than 1000 * 60 * 5 milliseconds. 
By default they are kept for infinite time but we can set a time as when they should be garbage collected.

Queries that fail are silently retried 3 times, with exponential backoff delay before capturing and displaying an error to the UI. 
To change this, you can alter the default retry and retryDelay options for queries to something other than 3 and the default exponential backoff function.

// MUTATION
const [formData, setFormData] = useState({
    title: "",
    description: "",
    price: "",
    brand: "",
    image: "",
  });

  const [btnValue, setBtnValue] = useState("ADD PRODUCT");

  const { mutate, isPending, isSuccess, isError } = useMutation({
    mutationFn: async (newProduct) => {
      return await axios.post("http://localhost:8000/api/products", newProduct);
    },
  });

  function handleChange(e) {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  }

  function handleClick(e) {}

  function handleSubmit(e) {
    e.preventDefault();
    console.log(formData);
    mutate(formData);
    if (isPending) setBtnValue("Adding Product...");
    if (isError) setBtnValue("Error!!!");
    if (isSuccess) {
      setBtnValue("Product Added");
      setTimeout(() => {
        setBtnValue("ADD PRODUCT");
      }, 5000);
    }
    setFormData({
      title: "",
      description: "",
      price: "",
      brand: "",
      image: "",
    });
  }

  A mutation can only be in one of the following states at any given moment:
    1) isIdle or status === 'idle' - The mutation is currently idle or in a fresh/reset state.
    2) isPending or status === 'pending' - The mutation is currently running.
    3) isError or status === 'error' - The mutation encountered an error.
    4) isSuccess or status === 'success' - The mutation was successful and mutation data is available.

Motivation: 
    Most core web frameworks do not come with an opinionated way of fetching or updating data in a holistic way. 
    Because of this developers end up building either meta-frameworks which encapsulate strict opinions about data-fetching, or they invent their own ways of fetching data. 
    This usually means cobbling together component-based state and side-effects, or using more general purpose state management libraries to store and provide asynchronous data throughout their apps.
    
    While most traditional state management libraries are great for working with client state, they are not so great at working with async or server state. 
    This is because server state is totally different. For starters, server state:

    Is persisted remotely in a location you do not control or own.
    Requires asynchronous APIs for fetching and updating.
    Implies shared ownership and can be changed by other people without your knowledge.
    Can potentially become "out of date" in your applications if you're not careful.
    
    Once you grasp the nature of server state in your application, even more challenges will arise as you go, for example:
        Caching... (possibly the hardest thing to do in programming).
        Deduping multiple requests for the same data into a single request.
        Updating "out of date" data in the background.
        Knowing when data is "out of date".
        Reflecting updates to data as quickly as possible.
        Performance optimizations like pagination and lazy loading data.
        Managing memory and garbage collection of server state.
        Memoizing query results with structural sharing.
        If you're not overwhelmed by that list, then that must mean that you've probably solved all of your server state problems already and deserve an award. 
        However, if you are like a vast majority of people, you either have yet to tackle all or most of these challenges and we're only scratching the surface!

    React Query is hands down one of the best libraries for managing server state. 
    It works amazingly well out-of-the-box, with zero-config, and can be customized to your liking as your application grows.

    React Query allows you to defeat and overcome the tricky challenges and hurdles of server state and control your app data before it starts to control you.

    On a more technical note, React Query will likely:
        Help you remove many lines of complicated and misunderstood code from your application and replace with just a handful of lines of React Query logic.
        Make your application more maintainable and easier to build new features without worrying about wiring up new server state data sources.
        Have a direct impact on your end-users by making your application feel faster and more responsive than ever before.
        Potentially help you save on bandwidth and increase memory performance.



















